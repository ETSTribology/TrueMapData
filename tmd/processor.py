"""TMD file processing module for reading and analyzing height map data."""

import os
import traceback
import numpy as np
import struct
from typing import Dict, Any, Tuple, Optional

from .utils import read_null_terminated_string, hexdump, detect_tmd_version, get_header_offset

class TMDProcessor:
    """
    Process TMD files generated by TrueMap v6 or GelSight.
    
    This class supports reading TMD files with different layouts and provides
    methods for extracting metadata and height maps from the binary data.
    """
    
    def __init__(self, file_path):
        """Initialize with the given TMD file path."""
        self.file_path = file_path
        self.basename = os.path.basename(file_path)
        self.data = None  # Will hold parsed data
        self.debug = False  # Set to True to print more debug information
    
    def set_debug(self, debug=True):
        """Enable or disable debug mode."""
        self.debug = debug
        return self

    @staticmethod
    def print_file_header(file_path, num_bytes=64):
        """Print the first `num_bytes` of the file in hex and ASCII."""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")
        with open(file_path, 'rb') as f:
            header_bytes = f.read(num_bytes)
        print("File header (hex):", header_bytes.hex())
        print("File header (ASCII):", header_bytes.decode("ascii", errors="replace"))
    
    def process(self):
        """
        Process the TMD file by reading and parsing the data.
        
        Returns the parsed data dictionary for further processing.
        """
        print("=" * 80)
        print(f"Processing file: {self.file_path}\n")
        
        # Check file existence
        if not os.path.exists(self.file_path):
            print(f"Error: File not found: {self.file_path}")
            return None
        
        # Inspect header
        try:
            self.print_file_header(self.file_path, num_bytes=64)
        except Exception as e:
            print(f"Error inspecting header: {e}")
            if self.debug:
                traceback.print_exc()
            return None
        
        # Try to process the file
        try:
            # Use unified file processor
            metadata, height_map = process_tmd_file(self.file_path, debug=self.debug)
            
            # Store the results
            self.data = {
                "header": metadata.get("header", ""),
                "comment": metadata.get("comment", ""),
                "width": metadata["width"],
                "height": metadata["height"],
                "x_length": metadata["x_length"],
                "y_length": metadata["y_length"],
                "x_offset": metadata["x_offset"],
                "y_offset": metadata["y_offset"],
                "height_map": height_map
            }
            
            # Print metadata summary
            print("\nSuccessfully read the file.")
            print(f"Header: {self.data['header']}")
            print(f"Comment: {self.data['comment']}")
            print(f"Dimensions: {self.data['width']} x {self.data['height']}")
            print(f"X length: {self.data['x_length']}, Y length: {self.data['y_length']}")
            print(f"X offset: {self.data['x_offset']}, Y offset: {self.data['y_offset']}")
            
            # Basic height map statistics
            if self.debug:
                print(f"\nHeight map statistics:")
                print(f"  Min: {height_map.min():.4f}")
                print(f"  Max: {height_map.max():.4f}")
                print(f"  Mean: {height_map.mean():.4f}")
                print(f"  Std: {height_map.std():.4f}")
            
            return self.data
            
        except Exception as e:
            print(f"Error processing file: {e}")
            if self.debug:
                traceback.print_exc()
            return None
